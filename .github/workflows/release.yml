# Inspiration taken from three primary sources:
#   1. The ripgrep repository release workflow
#     * https://github.com/BurntSushi/ripgrep/blob/master/.github/workflows/release.yml
#   2. Article on automated multi-platform releases in GitHub Actions linked to in ripgrep workflow file
#     * https://eugene-babichenko.github.io/blog/2020/05/09/github-actions-cross-platform-auto-releases/
#   3. The cargo-deny release workflow file
#     * https://github.com/EmbarkStudios/cargo-deny/blob/main/.github/workflows/ci.yaml
name: Compile Release Binaries and Create New Release
on:
  push:
    tags:
      # This repo contains multiple crates, so release tags are of the form <crate>/<version>
      # where <version> follows semver (x.y.z) with 'v' prefix
      - "*/v[0-9]+.[0-9]+.[0-9]+"

jobs:

  extract-release-metadata:
    name: Extract crate name and version from release tag
    runs-on: ubuntu-latest
    steps:

      - name: Extract crate name and version from release tag
        id: extract-release-metadata
        shell: bash
        run: |
          set -e

          CRATE_NAME="$(echo ${{ github.ref_name }} | cut -d/ -f1 | tr -d '[:space:]')"
          echo "::set-output name=crate_name::${CRATE_NAME}"
          RELEASE_VERSION="$(echo ${{ github.ref_name }} | cut -d/ -f2 | tr -d '[:space:]')"
          echo "::set-output name=release_version::${RELEASE_VERSION}"
    outputs:
      crate_name: "${{ steps.extract-release-metadata.outputs.crate_name }}"
      release_version: "${{ steps.extract-release-metadata.outputs.release_version }}"

  create-github-release:
    name: Create GitHub release
    needs: extract-release-metadata
    runs-on: ubuntu-latest
    steps:

      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Create GitHub release
        id: create-release
        run: |
          echo "::set-output name=release_url::$(\
            gh release create \
            ${{ github.ref }} \
            --title 'Release: ${{ needs.extract-release-metadata.outputs.crate_name }} ${{ needs.extract-release-metadata.outputs.release_version }}'\
          )"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
    outputs:
      release_url: "${{ steps.create-release.outputs.release_url }}"

  build-release-binaries:
    name: Build release binaries and upload assets
    needs: 
      - extract-release-metadata
      - create-github-release
    permissions:
      contents: write
      packages: read
    strategy:
      matrix:
        include:
          # TODO: Test build locally on macOS before re-enabling
          # Semantics of variable substitution/sed/grep in Bash on macOS appear to be different
          # - os: macos-latest
          #   target: aarch64-apple-darwin
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            target: i686-pc-windows-gnu
          - os: ubuntu-latest
            target: x86_64-pc-windows-gnu
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
    runs-on: "${{ matrix.os }}"

    steps:

      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Install Docker (BuildX)
        if: "${{ matrix.os == 'ubuntu-latest' }}"
        uses: docker/setup-buildx-action@v1
        with:
          install: true

      - name: Login to Github Packages
        if: "${{ matrix.os == 'ubuntu-latest' }}"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

        # Inspired by https://github.com/actions/cache/blob/main/examples.md#rust---cargo
      - name: Configure caching for Rust toolchain
        if: "${{ matrix.os == 'macos-latest' }}"
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: "${{ runner.os }}-cargo-${{ hashFiles('~/.cargo/registry/index/*/.git/refs/remotes/origin/master') }}"

        # Toolchain version and components must match build-support/docker/install-rust.sh
      - name: Install Rust toolchain
        if: "${{ matrix.os == 'macos-latest' }}"
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: "${{ matrix.target }}"
          profile: minimal
          components: clippy, llvm-tools-preview, rust-src, rustfmt

        # Tools installed must match build-support/docker/install-cargo-tools.sh
      - name: Install Cargo tools
        if: "${{ matrix.os == 'macos-latest' }}"
        shell: bash
        run: |
          cargo install --locked cross
          cargo install --locked cargo-deny
          cargo install --locked grcov

      - name: Compile the package in release mode
        if: "${{ matrix.os == 'ubuntu-latest' }}"
        shell: bash
        run: |
          ./run.sh build --target "${{ matrix.target }}" -p "${{ needs.extract-release-metadata.outputs.crate_name }}" --profile release-fat-lto

      - name: Compile the package in release mode
        if: "${{ matrix.os == 'macos-latest' }}"
        shell: bash
        run: |
          ./run.sh --local build --target "${{ matrix.target }}" -p "${{ needs.extract-release-metadata.outputs.crate_name }}" --profile release-fat-lto

      - name: Upload asset(s) to release
        shell: bash
        run: |
          find "./target/${{ matrix.target }}/release-fat-lto" -maxdepth 1 -type f -iregex '.*/${{ needs.extract-release-metadata.outputs.crate_name }}.*' \
            | while read FILEPATH
            do
              if ( [ -f "${FILEPATH}" ] && [ -x "${FILEPATH}" ] )
              then
                FILENAME="$(basename ${FILEPATH})"
                TARBALL_FILENAME="${FILENAME/.exe/}-${{ matrix.target }}.tar.gz"
                HASH_FILENAME="${TARBALL_FILENAME}.sha256"

                tar cvzf "${TARBALL_FILENAME}" -C "./target/${{ matrix.target }}/release-fat-lto" "${FILENAME}"
                # Removing path prefix from shasum output to make verifying with `shasum -a 256 -c` after download easier
                shasum -a 256 "./target/${{ matrix.target }}/release-fat-lto/${FILENAME}" | sed 's/\.\/target\/${{ matrix.target }}\/release-fat-lto\///g' >> "${HASH_FILENAME}"
                shasum -a 256 "${TARBALL_FILENAME}" >> "${HASH_FILENAME}"

                gh release upload --clobber "${{ github.ref_name }}" "${TARBALL_FILENAME}"
                gh release upload --clobber "${{ github.ref_name }}" "${HASH_FILENAME}"
              fi
            done
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
